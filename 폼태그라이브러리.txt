[Form Tag Library(spring custom tag)]
 : 버전 2.0부터 스프링은 JSP와 스프링 웹MVC를 사용하는 경우 폼 요소를 다룰 수 있도록
  데이터 바인딩과 관련 된 광범위한 태그 세트를 제공한다.
  
 Form Tag Library는 spring-webmvc.jar에 있다.
 
	# form 태그를 위한 커스텀 태그
	이 태그는 HTML 'form' 태그를 생성하고 바인딩을 위해서 내부 태그에 바인딩 경로(path)를 지정한다.
	
	<form:form>
	
	</form:form>
	
	위의 예처럼 method, action 을 설정하지 않았을 경우에 
	 method는 post로 설정, action은 현재 요청 URL 값이 설정된다.
	 
	==> 생성된 HTML에는 id 속성이 주어지는데, 이떄 id 속성값은 
	   입력폼의 값을 저장하는 커맨드 객체의 이름이 할당된다.
	   
		<form id="command" memthod="post" action="addMember" method="post">
	
		커맨드 객체의 이름이 기본값인 command가 아닐 경우("join")에는
		 commandName 속성에 커맨드 객체의 이름을 명시해야 한다.
		
		<form:form commandName="join"></form:form>
		
		# <form:form> 태그 내부에는 <input> 태그나 <select> 태그와 같이 입력 폼을 출력하는데 필요한
		 HTML 태그를 입력해서 사용할 수 있다.
		이때, 입력한 값이 잘못되어 다시 값을 입력해야 하는 경우에는 이전에 입력한 값을 출력할 수 있다.
		
			<form:form commandName="join">
				<input type="text" name="id" value="${join.id}" />
			</form:form>
		
		#<input> 태그를 위한 커스텀 태그
		
			<form:input>	---> text 타입의 <input>
			<form:password>	---> password 타입의 <input>
			<form:hidden>	---> hidden 타입의 <input>
			
			path 속성: 바인딩 될 command 객체의 프로퍼티를 지정하는 속성
			
			<form:input path="userId">
			---> <input id="userId" name="useId" type="text" value="" />
			
		#<select> 태그를 위한 커스텀 태그
		
			<form:select>	---> <select> 태그를 생성한다. <option> 태그를 생성하는데 필요한 콜렉션을 전달 받을 수도 있다.
			<form:options>	---> 지정한 콜렉션 객체를 이용해서 <option> 태그를 생성한다.
			<form:option>	---> 하나의 <option> 태그를 생성한다.
			
		이 태그는 선택 옵션을 제공할 때 주로 사용하는 태그이므로, 여러개의 선택사항을 제공한다.
		선택정보(옵션정보)는 컨트롤러에서 생성해서 뷰로 전달하는 경우가 일반적이다.
			@ModelAttribute Annotaion을 이용해서 전달한다.
		ex1)
			@ModelAttribute("seasons")
			protected List<String> referData() throws Exception{
				List<String> season = new ArrayList<String>();
				season.add("봄");
				season.add("여름");
				season.add("가을");
				season.add("겨울");
			}
			
			<form:form commandName="trip">
				<form:select path="seasons" items="${seasons}" />
			</form:form>
			---> 생성되는 HTML은
				<select id="seasons" name="seasons">
					<option value="봄">봄</option>
					<option value="여름">여름</option>
					<option value="가을">가을</option>
					<option value="겨울">겨울</option>
				</select>
			
			위의 결과와 동일한 html 생성하는 커스텀 태그 사용방법으로는 아래와 같이 사용할 수도 있다.
			<form:select path="seasons">
				<option value="">----선택해주세요----</option>
				<form:options items="${seasons}">
			</form:form>
		ex2)
			<form:select path="seasons">
				<form:option value="따뜻한 봄"/>
				<form:option value="뜨거운 여름">여름</form:option>
				<form:option value="선선한 가을" lable="낙엽 떨어지는 가을"/>
				<form:option value="추운 겨울"/>
			</form:select>
			---> 생성되는 HTML은
				<select id="seasons" name="seasons">
					<option value="따뜻한 봄">따뜻한 봄</option>
					<option value="뜨거운 여름">여름</option>
					<option value="선선한 가을">낙엽 떨어지는 가을</option>
					<option value="추운 겨울">추운 겨울</option>
				</select>
		
			## 콜렉션에 있는 객체가 String이 아닌 경우
			
			public class Code{
				private String code;
				private String label;
				
				// getter, setter
				........
				
			}
			
			<form:select path="jobCode">
				<option value="">------- 선택 하세요 -------</option>
				<form:options items=${jobCode} itemLabel="label" itemValue="code" />
			</form:select>
			
			seasons 객체의 프로퍼티 값이 "봄" 인 경우
			
			<select id="seasons" name="seasons">
				<option value="봄" selected="selected">봄</option>
				<option value="여름">여름</option>
				<option value="가을">가을</option>
				<option value="겨울">겨울</option>
			</select>
		
		# checkBox 타입의 <input> 태그를 위한 커스텀 태그:
		<form:checkboxes>, <form:checkbox>
		
		public class MemberInfo{
			private String[] favorites;
			
			public String[] getFavorites(){
				return favorites;
			}
			
			public void setFavorites(String[] favorites){
				this.favorites = favorites;
			}
			
			.....
		}
		
		<input type="checkbox" name="favorites" value="독서">독서</input>
		<input type="checkbox" name="favorites" value="여행">여행</input>
		
		<form:checkboxes> : 커맨드 객체의 특정 프로퍼티와 관련된 checkbox 타입의 input 태그 목록을 생성한다.
		<form:checkboxe> : 커맨드 객체의 특정 프로퍼티와 관련된 checkbox 타입 한개의 input 태그 목록을 생성한다.
		
		ex)
			<form:label path="favorites">선호하는것</form:label>
			<form:checkboxes items="${favor1}" path="" />
			---> 생성되는 HTML은
				<input id="favorites1" type="checkbox" name="favorites" value="독서"/><label>독서</label>
				<input id="favorites2" type="checkbox" name="favorites" value="여행"/><label>여행</label>
			
			public class MemberInfo{
				...
				private boolean contractAgreement;
				
				public boolean isContractAgreement(){
					return contractAgreement;
				}
				
				public void setContractAgreement(boolean contractAgreement){
					this.contractAgreement = contractAgreement;
				}
			}
				
			<form:checkbox path="contractAgreement" label="위의 약관에 동의합니다."/>
			---> 생성되는 HTML은
				<input id="contractAgreement" name="contractAgreement" type="checkbox" value="true"/>
				<label for="contractAgreement1">위의 약관에 동의합니다.</label>
			
				<input type="hidden" name="_contractAgreement" value="on"/>	// '_' 언더스코어가 붙는 히든 파라미터로 넘겨줌(스프링의 hidden 접두어)
			
		# radio 타입의 <input> 태그를 위한 커스텀 태그:
		<form:radiobuttons> : 커맨드 객체의 특정 프로퍼티와 관련된 radio 타입의 <input> 태그 목록을 생성한다.
		<form:radiobutton> : 커맨드 객체의 특정 프로퍼티와 관련된 radio 타입 한개의 <input> 태그를 생성한다.
			
		ex)
			<form:radiobuttons> 커스텀 태그는 items 속성을 이용해서 값으로 사용할 콜렉션을 전달받는다.
			path 속성을 이용하여 값을 바인딩 할 커맨드 객체의 프로퍼티를 지정한다.
			
			<form:label path="program">
				<form:radiobuttons items="${programs}" path="program"/>
			</form>
				---> 생성되는 HTML은
					<input id="program1" name="program" type="radio" value="c lang" />
					<label for="program1">C언어</label>
					<input id="program2" name="program" type="radio" value="java" />
					<label for="program2">JAVA언어</label>
		
		# text 타입의 <textarea> 태그를 위한 커스텀 태그
		<form:textarea> : 여러 줄을 입력받아야 하는 경우
		
		ex)
			<form:label path="memo"</form:label>
			<form:textarea path="memo" cols="50" rows="5" />
				---> 생성되는 HTML은
					<label for="memo">MEMO</label>
					<textarea id="memo" name="memo" cols="50" rows="50"></textarea>
					
		# 에러 관련 커스텀 태그
		Errors 객체, BindingResult 객체를 이용해서 에러 정보를 추가한 경우
		<form:errors> 커스텀 태그를 이용해서 에러정보를 출력할 수 있다.
		path 속성을 이용해서 커맨드 객체의 특정 프로퍼티와 관련된 에러 메세지를 출력할 수 있다.
		
		ex)
			pulbic class MemValidator implements Validator{
				@Override
				public void validate(Object target, Errors errors){
					ValidationUtils.rejectIfEmptyOrWhitespace(errors, "userId", "required");
				}
			}
			
			<form:form commandName="memberValidator">
				<form:label path="userId">아이디</form:label>
				<form:input path="userId" />
				<form:errors path="userId" />
			</form:form>
		
		<form:errors>는 지정한 프로퍼티와 관련된 한 개 이상의 에러메세지를 출력한다.
		각 에러메세지를 생성할 때 두개의 속성을 이용한다.
		속성 : element, delimiter
		
		<form:errors path="userId" element="div" delimiter=""/>
		.element는 각 에러메세지를 출력할 때 사용될 Html 태그로 기본값은 <span>
		.delimeter는 에러메세지를 구분할 때 사용될 Html 태그로 기본값은 <br/>
		